{"ast":null,"code":"var _jsxFileName = \"/home/osvaldo/unix_tests/git/trybe-exercises/exercises/front-end/exercise-react-hooks-refactoring/src/TicTacToe.js\";\nimport React, { useContext } from 'react';\nimport GameContext from './context/GameContext';\nimport GameBoard from './GameBoard';\n\nfunction TicTacToe() {\n  const {\n    gameBoard\n  } = useContext(GameContext);\n\n  const victoryArchivedInLine = gameBoard => {\n    for (let i = 0; i <= 6; i += 3) {\n      if (gameBoard[i] === gameBoard[i + 1] && gameBoard[i + 1] === gameBoard[i + 2] && gameBoard[i] !== 0) return gameBoard[i];\n    }\n\n    return false;\n  };\n\n  const victoryArchivedInColumn = gameBoard => {\n    for (let i = 0; i <= 2; i += 1) {\n      if (gameBoard[i] === gameBoard[i + 3] && gameBoard[i + 3] === gameBoard[i + 6] && gameBoard[i] !== 0) return gameBoard[i];\n    }\n\n    return false;\n  };\n\n  const victoryArchivedInDiagonals = gameBoard => {\n    if (gameBoard[4] === 0) return false;\n\n    if (gameBoard[0] === gameBoard[4] && gameBoard[4] === gameBoard[8]) {\n      return gameBoard[0];\n    }\n\n    if (gameBoard[2] === gameBoard[4] && gameBoard[4] === gameBoard[6]) {\n      return gameBoard[2];\n    }\n\n    return false;\n  }; // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     activePlayer: 1,\n  //     gameBoard: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  //   };\n  //   this.updateState = this.updateState.bind(this);\n  //   this.resetGame = this.resetGame.bind(this);\n  //   this.renderButton = this.renderButton.bind(this);\n  // }\n  // resetGame() {\n  //   this.setState({\n  //     activePlayer: 1,\n  //     gameBoard: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  //   });\n  // }\n  // toggleActivePlayer() {\n  //   const { activePlayer } = this.state;\n  //   if (activePlayer === 1) return 2;\n  //   return 1;\n  // }\n  // updateState(cellClicked) {\n  //   this.setState((state) => {\n  //     const newState = [...state.gameBoard];\n  //     let newActivePlayer = state.activePlayer;\n  //     if (state.gameBoard[cellClicked] === 0) {\n  //       newState[cellClicked] = state.activePlayer;\n  //       newActivePlayer = this.toggleActivePlayer();\n  //     } else newState[cellClicked] = state.gameBoard[cellClicked];\n  //     return {\n  //       activePlayer: newActivePlayer,\n  //       gameBoard: newState,\n  //     };\n  //   });\n  // }\n\n\n  const victoryArchieved = () => {\n    return victoryArchivedInLine(gameBoard) || victoryArchivedInColumn(gameBoard) || victoryArchivedInDiagonals(gameBoard);\n  };\n\n  const renderButton = () => {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.resetGame,\n      \"data-testid\": \"restart-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, \"Recome\\xE7ar Jogo\");\n  };\n\n  const win = this.victoryArchieved();\n\n  if (!gameBoard.includes(0) && !win) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderButton(), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, \"Empate\"));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderButton(), !win ? /*#__PURE__*/React.createElement(GameBoard, {\n    gameState: gameBoard,\n    updateGame: this.updateState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, `Player ${win === 2 ? 'O' : 'X'} Ganhou`));\n}\n\nexport default TicTacToe;","map":{"version":3,"sources":["/home/osvaldo/unix_tests/git/trybe-exercises/exercises/front-end/exercise-react-hooks-refactoring/src/TicTacToe.js"],"names":["React","useContext","GameContext","GameBoard","TicTacToe","gameBoard","victoryArchivedInLine","i","victoryArchivedInColumn","victoryArchivedInDiagonals","victoryArchieved","renderButton","resetGame","win","includes","updateState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,SAASC,SAAT,GAAqB;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAgBJ,UAAU,CAACC,WAAD,CAAhC;;AAEA,QAAMI,qBAAqB,GAAID,SAAD,IAAe;AAC3C,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9B,UACEF,SAAS,CAACE,CAAD,CAAT,KAAiBF,SAAS,CAACE,CAAC,GAAG,CAAL,CAA1B,IACGF,SAAS,CAACE,CAAC,GAAG,CAAL,CAAT,KAAqBF,SAAS,CAACE,CAAC,GAAG,CAAL,CADjC,IAEGF,SAAS,CAACE,CAAD,CAAT,KAAiB,CAHtB,EAIE,OAAOF,SAAS,CAACE,CAAD,CAAhB;AACH;;AACD,WAAO,KAAP;AACD,GATD;;AAWA,QAAMC,uBAAuB,GAAIH,SAAD,IAAe;AAC7C,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9B,UACEF,SAAS,CAACE,CAAD,CAAT,KAAiBF,SAAS,CAACE,CAAC,GAAG,CAAL,CAA1B,IACGF,SAAS,CAACE,CAAC,GAAG,CAAL,CAAT,KAAqBF,SAAS,CAACE,CAAC,GAAG,CAAL,CADjC,IAEGF,SAAS,CAACE,CAAD,CAAT,KAAiB,CAHtB,EAIE,OAAOF,SAAS,CAACE,CAAD,CAAhB;AACH;;AACD,WAAO,KAAP;AACD,GATD;;AAWA,QAAME,0BAA0B,GAAIJ,SAAD,IAAe;AAChD,QAAIA,SAAS,CAAC,CAAD,CAAT,KAAiB,CAArB,EAAwB,OAAO,KAAP;;AACxB,QAAIA,SAAS,CAAC,CAAD,CAAT,KAAiBA,SAAS,CAAC,CAAD,CAA1B,IAAiCA,SAAS,CAAC,CAAD,CAAT,KAAiBA,SAAS,CAAC,CAAD,CAA/D,EAAoE;AAClE,aAAOA,SAAS,CAAC,CAAD,CAAhB;AACD;;AACD,QAAIA,SAAS,CAAC,CAAD,CAAT,KAAiBA,SAAS,CAAC,CAAD,CAA1B,IAAiCA,SAAS,CAAC,CAAD,CAAT,KAAiBA,SAAS,CAAC,CAAD,CAA/D,EAAoE;AAClE,aAAOA,SAAS,CAAC,CAAD,CAAhB;AACD;;AACD,WAAO,KAAP;AACD,GATD,CAzBmB,CAoCnB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7B,WACEJ,qBAAqB,CAACD,SAAD,CAArB,IACGG,uBAAuB,CAACH,SAAD,CAD1B,IAEGI,0BAA0B,CAACJ,SAAD,CAH/B;AAKD,GAND;;AAQA,QAAMM,YAAY,GAAG,MAAM;AACzB,wBACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAE,KAAKC,SAFhB;AAGE,qBAAY,gBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF;AASD,GAVD;;AAYA,QAAMC,GAAG,GAAG,KAAKH,gBAAL,EAAZ;;AACA,MAAI,CAACL,SAAS,CAACS,QAAV,CAAmB,CAAnB,CAAD,IAA0B,CAACD,GAA/B,EAAoC;AAClC,wBACE,0CACG,KAAKF,YAAL,EADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF;AAMD;;AACD,sBACE,0CACG,KAAKA,YAAL,EADH,EAEI,CAACE,GAAF,gBAEG,oBAAC,SAAD;AACE,IAAA,SAAS,EAAER,SADb;AAEE,IAAA,UAAU,EAAE,KAAKU,WAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,gBAOG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,UAASF,GAAG,KAAK,CAAR,GAAY,GAAZ,GAAkB,GAAI,SAArC,CATN,CADF;AAaD;;AAED,eAAeT,SAAf","sourcesContent":["import React, { useContext } from 'react';\nimport GameContext from './context/GameContext';\nimport GameBoard from './GameBoard';\n\nfunction TicTacToe() {\n  const { gameBoard } = useContext(GameContext);\n\n  const victoryArchivedInLine = (gameBoard) => {\n    for (let i = 0; i <= 6; i += 3) {\n      if (\n        gameBoard[i] === gameBoard[i + 1]\n        && gameBoard[i + 1] === gameBoard[i + 2]\n        && gameBoard[i] !== 0\n      ) return gameBoard[i];\n    }\n    return false;\n  }\n\n  const victoryArchivedInColumn = (gameBoard) => {\n    for (let i = 0; i <= 2; i += 1) {\n      if (\n        gameBoard[i] === gameBoard[i + 3]\n        && gameBoard[i + 3] === gameBoard[i + 6]\n        && gameBoard[i] !== 0\n      ) return gameBoard[i];\n    }\n    return false;\n  }\n\n  const victoryArchivedInDiagonals = (gameBoard) => {\n    if (gameBoard[4] === 0) return false;\n    if (gameBoard[0] === gameBoard[4] && gameBoard[4] === gameBoard[8]) {\n      return gameBoard[0];\n    }\n    if (gameBoard[2] === gameBoard[4] && gameBoard[4] === gameBoard[6]) {\n      return gameBoard[2];\n    }\n    return false;\n  }\n\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     activePlayer: 1,\n  //     gameBoard: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  //   };\n\n  //   this.updateState = this.updateState.bind(this);\n  //   this.resetGame = this.resetGame.bind(this);\n  //   this.renderButton = this.renderButton.bind(this);\n  // }\n\n  // resetGame() {\n  //   this.setState({\n  //     activePlayer: 1,\n  //     gameBoard: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  //   });\n  // }\n\n  // toggleActivePlayer() {\n  //   const { activePlayer } = this.state;\n  //   if (activePlayer === 1) return 2;\n  //   return 1;\n  // }\n\n  // updateState(cellClicked) {\n  //   this.setState((state) => {\n  //     const newState = [...state.gameBoard];\n  //     let newActivePlayer = state.activePlayer;\n\n  //     if (state.gameBoard[cellClicked] === 0) {\n  //       newState[cellClicked] = state.activePlayer;\n  //       newActivePlayer = this.toggleActivePlayer();\n  //     } else newState[cellClicked] = state.gameBoard[cellClicked];\n\n  //     return {\n  //       activePlayer: newActivePlayer,\n  //       gameBoard: newState,\n  //     };\n  //   });\n  // }\n\n  const victoryArchieved = () => {\n    return (\n      victoryArchivedInLine(gameBoard)\n      || victoryArchivedInColumn(gameBoard)\n      || victoryArchivedInDiagonals(gameBoard)\n    );\n  }\n\n  const renderButton = () => {\n    return (\n      <button\n        type=\"button\"\n        onClick={this.resetGame}\n        data-testid=\"restart-button\"\n      >\n        Recome√ßar Jogo\n      </button>\n    );\n  }\n\n  const win = this.victoryArchieved();\n  if (!gameBoard.includes(0) && !win) {\n    return (\n      <>\n        {this.renderButton()}\n        <h1>Empate</h1>\n      </>\n    );\n  }\n  return (\n    <>\n      {this.renderButton()}\n      {(!win)\n        ? (\n          <GameBoard\n            gameState={gameBoard}\n            updateGame={this.updateState}\n          />\n        )\n        : <h1>{`Player ${win === 2 ? 'O' : 'X'} Ganhou`}</h1>}\n    </>\n  );\n}\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}